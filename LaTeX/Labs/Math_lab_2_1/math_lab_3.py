import numpy as np
import matplotlib.pyplot as plt

# --- DATA LOADING (Using the full data previously provided) ---
# Column 1 data (x_true - angles in degrees in the original table)
col1_data_str = [
    "14,60679", "14,36097", "14,01837", "13,47847", "12,82732", "11,9793", "11,07037", "10,01602", "8,809239", "7,600733",
    "6,250627", "4,822896", "3,338236", "1,915875", "0,33595", "-1,11413", "-2,54897", "-4,02122", "-5,40404", "-6,73661",
    "-7,95675", "-9,07488", "-10,1623", "-11,0718", "-11,7865", "-12,4767", "-12,8935", "-13,2318", "-13,4584", "-13,5394",
    "-13,3588", "-13,1137", "-12,589", "-11,9983", "-11,2649", "-10,4578", "-9,35681", "-8,33694", "-7,15604", "-5,81696",
    "-4,47662", "-3,00551", "-1,51742", "-0,03368", "1,466043", "2,922463", "4,38788", "5,789037", "7,179385", "8,450634",
    "9,662085", "10,81681", "11,76189", "12,69686", "13,40598", "13,97888", "14,44533", "14,77335", "14,24459", "14,17956",
    "14,01893", "13,72762", "13,25503", "12,59217", "11,92609", "10,9793", "9,976685", "8,851247", "7,74667", "6,333602",
    "5,05582", "3,649573", "2,142803", "0,632507", "-0,76874", "-2,29522", "-3,74662", "-5,10469", "-6,38217", "-7,73727",
    "-8,90357", "-9,84433", "-10,8524", "-11,6817", "-12,3583", "-12,8291", "-13,2771", "-13,5033", "-13,5589", "-13,5054",
    "-13,2294", "-12,8448", "-12,3352", "-11,6897", "-10,8295", "-9,89017", "-8,87405", "-7,6641", "-6,34256", "-5,02594",
    "-3,60606", "-2,1062", "-0,59831", "0,850823", "2,414693", "3,803572", "5,227954", "6,631334", "7,959687", "9,134208",
    "10,22211", "11,25092", "12,1204", "12,87352", "13,52899", "14,04301", "14,3528", "14,55581", "14,59762", "14,4601",
    "14,19953", "13,82172", "13,26822", "12,57603", "11,78164", "10,84639", "9,758365", "8,618404", "7,390886", "6,082123",
    "4,710187", "3,292936", "1,898773", "0,47702", "-0,93945", "-2,34268", "-3,71217", "-4,99871", "-6,31209", "-7,44378",
    "-8,48309", "-9,45561", "-10,3113", "-11,0435", "-11,6154", "-12,0947", "-12,3734", "-12,5425", "-12,4598", "-12,3079",
    "-12,0813", "-11,6375", "-10,9527", "-10,2078", "-9,38254", "-8,37451", "-7,27786", "-6,1482", "-4,88604", "-3,5839",
    "-2,15644", "-0,78078", "0,65777", "2,074563", "3,543813", "4,962521", "6,309611", "7,501027", "8,70717", "9,900375",
    "10,91039", "11,77435", "12,5305", "13,20343", "13,72963", "14,15126", "14,36013", "14,43482", "14,38155", "14,18846",
    "13,79296", "13,2491", "12,6967", "11,96221", "11,0807", "10,10783", "8,944631", "7,771735", "6,526992", "5,199966",
    "3,804941", "2,475575", "1,060865", "-0,33567", "-1,77491", "-3,18539", "-4,43405", "-5,7373", "-6,91862", "-8,02475",
    "-8,98532", "-9,8459", "-10,6063", "-11,229", "-11,7498", "-12,0213", "-12,2274", "-12,267", "-12,1504", "-11,9306",
    "-11,4441", "-10,9374", "-10,2319", "-9,42437", "-8,45568", "-7,38551", "-6,24701", "-5,03245", "-3,77752", "-2,35363",
    "-1,03923", "0,377764", "1,78318", "3,25762", "4,612006", "5,982955", "7,26891", "8,457935", "9,614975", "10,62331",
    "11,52889", "12,36126", "13,04308", "13,58952", "14,05294", "14,28755", "14,40655", "14,4129", "14,29502", "14,03866",
    "13,54639", "13,01344", "12,33411", "11,48715", "10,59806", "9,494912", "8,325714", "7,138503", "5,898049", "4,65486",
    "3,249832", "1,808153", "0,467059", "-0,94938", "-2,30189", "-3,63859", "-4,84037", "-6,0224", "-7,04097", "-8,17043",
    "-8,97546", "-9,83401", "-10,3948", "-10,9255", "-11,3229", "-11,5302", "-11,6566", "-11,5521", "-11,3704", "-10,977",
    "-10,4937", "-9,86306", "-9,12226", "-8,23108", "-7,20014", "-5,96643", "-4,86903", "-3,69233", "-2,3406", "-1,08623",
    "0,247063", "1,591202", "3,087573", "4,378432", "5,773635", "7,051892", "8,225445", "9,372289", "10,45782", "11,39436",
    "12,34032", "13,01549", "13,62057", "14,09519", "14,4724", "14,63658", "14,69728", "14,60982", "14,31196", "13,97447",
    "13,50412", "12,85769"
]
# Column 2 data (y_true - time in seconds, same as column 4)
col2_data_str = [
    "0", "0,033555", "0,067011", "0,100466", "0,134122", "0,167677", "0,201233", "0,234788", "0,268344", "0,3019",
    "0,335455", "0,369011", "0,402566", "0,436122", "0,469677", "0,503233", "0,536788", "0,570344", "0,6039", "0,637455",
    "0,671011", "0,704566", "0,738122", "0,771677", "0,805233", "0,838788", "0,872344", "0,9059", "0,939455", "0,973011",
    "1,006566", "1,040122", "1,073677", "1,107233", "1,140788", "1,174344", "1,2079", "1,241455", "1,275011", "1,308566",
    "1,342122", "1,375677", "1,409233", "1,442788", "1,476344", "1,5099", "1,543455", "1,577011", "1,610566", "1,644122",
    "1,677677", "1,711233", "1,744788", "1,778344", "1,8119", "1,845455", "1,879011", "1,912566", "1,946122", "1,979677",
    "2,013233", "2,046788", "2,080344", "2,1139", "2,147455", "2,181011", "2,214566", "2,248122", "2,281677", "2,315233",
    "2,348788", "2,382344", "2,4159", "2,449455", "2,483011", "2,516466", "2,549922", "2,583577", "2,617133", "2,650688",
    "2,684244", "2,7178", "2,751355", "2,784911", "2,818466", "2,852022", "2,885577", "2,919133", "2,952688", "2,986244",
    "3,0198", "3,053355", "3,086911", "3,120466", "3,154022", "3,187577", "3,221133", "3,254688", "3,288244", "3,3218",
    "3,355355", "3,388911", "3,422466", "3,456022", "3,489577", "3,523133", "3,556688", "3,590244", "3,6238", "3,657355",
    "3,690911", "3,724466", "3,758022", "3,791577", "3,825133", "3,858688", "3,892244", "3,9258", "3,959355", "3,992911",
    "4,026466", "4,060022", "4,093577", "4,127133", "4,160688", "4,194244", "4,2277", "4,261155", "4,294811", "4,328366",
    "4,361922", "4,395477", "4,429033", "4,462588", "4,496144", "4,5297", "4,563255", "4,596811", "4,630366", "4,663922",
    "4,697477", "4,731033", "4,764588", "4,798144", "4,8317", "4,865255", "4,898811", "4,932366", "4,965922", "4,999477",
    "5,033033", "5,066588", "5,100144", "5,1337", "5,167255", "5,200811", "5,234366", "5,267922", "5,301477", "5,335033",
    "5,368588", "5,402144", "5,4357", "5,469254", "5,502814", "5,536364", "5,569924", "5,603474", "5,637034", "5,670584",
    "5,704144", "5,737704", "5,771254", "5,804814", "5,838364", "5,871924", "5,905474", "5,939034", "5,972584", "6,006144",
    "6,039704", "6,073254", "6,106814", "6,140364", "6,173924", "6,207474", "6,241034", "6,274584", "6,308144", "6,341704",
    "6,375254", "6,408814", "6,442364", "6,475924", "6,509474", "6,543034", "6,576584", "6,610144", "6,643704", "6,677254",
    "6,710814", "6,744364", "6,777924", "6,811474", "6,845034", "6,878584", "6,912144", "6,945704", "6,979254", "7,012814",
    "7,046364", "7,079924", "7,113474", "7,147034", "7,180584", "7,214144", "7,247704", "7,281254", "7,314814", "7,348364",
    "7,381924", "7,415474", "7,449034", "7,482584", "7,516144", "7,549704", "7,583254", "7,616814", "7,650364", "7,683924",
    "7,717474", "7,751034", "7,784584", "7,818144", "7,851704", "7,885254", "7,918814", "7,952364", "7,985924", "8,019474",
    "8,053034", "8,086584", "8,120144", "8,153604", "8,187054", "8,220714", "8,254264", "8,287824", "8,321374", "8,354934",
    "8,388484", "8,422044", "8,455604", "8,489154", "8,522714", "8,556264", "8,589824", "8,623374", "8,656934", "8,690484",
    "8,724044", "8,757604", "8,791154", "8,824714", "8,858264", "8,891824", "8,925374", "8,958934", "8,992484", "9,026044",
    "9,059604", "9,093154", "9,126714", "9,160264", "9,193824", "9,227374", "9,260934", "9,294484", "9,328044", "9,361604",
    "9,395154", "9,428714", "9,462264", "9,495824", "9,529374", "9,562934", "9,596484", "9,630044", "9,663604", "9,697154",
    "9,730714", "9,764264", "9,797824", "9,831374", "9,864934", "9,898484", "9,932044", "9,965604", "9,999154", "10,03271",
    "10,06626", "10,09982"
]
# Column 3 data (x_pred_det - theoretical angles in RADIANS)
col3_data_str = [
    "14,60679", "14,52096", "14,26551", "13,84343", "13,25566", "12,51364", "11,62455", "10,59888", "9,448633", "8,187346",
    "6,829887", "5,392126", "3,891045", "2,344193", "0,76984", "-0,81361", "-2,38744", "-3,93327", "-5,43288", "-6,8686",
    "-8,22365", "-9,48202", "-10,629", "-11,651", "-12,5362", "-13,274", "-13,8559", "-14,2749", "-14,5261", "-14,6067",
    "-14,5156", "-14,254", "-13,8248", "-13,2332", "-12,4861", "-11,5922", "-10,5621", "-9,40791", "-8,14314", "-6,78271",
    "-5,34254", "-3,83963", "-2,29155", "-0,71659", "0,866837", "2,440077", "3,984597", "5,482337", "6,91561", "8,267657",
    "9,52251", "10,6655", "11,68312", "12,56347", "13,29619", "13,87264", "14,28608", "14,53164", "14,60643", "14,50958",
    "14,24222", "13,8075", "13,21051", "12,45828", "11,55967", "10,52519", "9,367059", "8,098817", "6,735443", "5,292877",
    "3,788157", "2,238875", "0,663283", "-0,92006", "-2,49263", "-4,03133", "-5,52298", "-6,95838", "-8,30768", "-9,55931",
    "-10,6986", "-11,7122", "-12,5882", "-13,3162", "-13,8878", "-14,2961", "-14,5365", "-14,606", "-14,5039", "-14,2313",
    "-13,7916", "-13,1897", "-12,4328", "-11,5299", "-10,4914", "-9,32972", "-8,05833", "-6,69228", "-5,24755", "-3,74115",
    "-2,19084", "-0,61473", "0,968552", "2,540502", "4,082551", "5,576669", "7,005212", "8,351475", "9,599595", "10,73487",
    "11,74403", "12,61516", "13,33806", "13,90421", "14,30698", "14,54161", "14,60536", "14,49748", "14,21924", "13,7739",
    "13,16671", "12,40477", "11,49708", "10,45427", "9,28863", "8,013804", "6,649006", "5,206581", "3,694157", "2,142779",
    "0,566173", "-1,01704", "-2,58834", "-4,12919", "-5,62156", "-7,04786", "-8,3913", "-9,63617", "-10,7678", "-11,7729",
    "-12,6396", "-13,3578", "-13,919", "-14,3167", "-14,5461", "-14,6046", "-14,4915", "-14,208", "-13,7576", "-13,1456",
    "-12,379", "-11,467", "-10,4203", "-9,25104", "-7,97313", "-6,60149", "-5,15231", "-3,64255", "-2,09002", "-0,51289",
    "1,070221", "2,640803", "4,180351", "5,670687", "7,094638", "8,43481", "9,676248", "10,80363", "11,80438", "12,66613",
    "13,37928", "13,93517", "14,32716", "14,55089", "14,60359", "14,48467", "14,19561", "13,73962", "13,12234", "12,35065",
    "11,43379", "10,38287", "9,209602", "7,92848", "6,553796", "5,102519", "3,590842", "2,037425", "0,459601", "-1,12363",
    "-2,69318", "-4,23155", "-5,71974", "-7,14116", "-8,47825", "-9,71609", "-10,8394", "-11,8357", "-12,6928", "-13,4006",
    "-13,951", "-14,3374", "-14,5554", "-14,6024", "-14,4777", "-14,183", "-13,7214", "-13,0986", "-12,3221", "-11,4006",
    "-10,3453", "-9,16819", "-7,88369", "-6,50614", "-5,05257", "-3,53918", "-1,98419", "-0,40635", "1,176732", "2,74552",
    "4,282507", "5,768722", "7,18758", "8,521569", "9,755803", "10,87536", "11,86681", "12,71909", "13,42168", "13,96673",
    "14,34753", "14,55981", "14,60097", "14,47054", "14,17001", "13,70309", "13,07498", "12,29344", "11,36719", "10,30765",
    "9,126659", "7,838787", "6,458405", "5,00644", "3,496641", "1,936081", "0,357818", "-1,22512", "-2,79319", "-4,3289",
    "-5,81329", "-7,22981", "-8,56134", "-9,79188", "-10,9077", "-11,8951", "-12,7429", "-13,4408", "-13,9809", "-14,3566",
    "-14,5636", "-14,5995", "-14,4638", "-14,1582", "-13,6862", "-13,0533", "-12,2672", "-11,3366", "-10,2732", "-9,0887",
    "-7,79738", "-6,41482", "-4,95647", "-3,44031", "-1,88327", "-0,30456", "1,278194", "2,845461", "4,379751", "5,862559",
    "7,276048", "8,604442", "9,831348", "10,94307", "11,9259", "12,76885", "13,46153", "13,9962", "14,36636", "14,56762",
    "14,59773", "14,45631", "14,14496", "13,6675", "13,02927", "12,23815", "11,30297", "10,23492", "9,046938", "7,752278",
    "6,36692", "4,906321"
]
# Column 4 data (y_pred_det - theoretical time in seconds)
col4_data_str = col2_data_str[:]


def convert_to_numpy_array(str_list):
    return np.array([float(s.replace(",", ".")) for s in str_list])

# Experimental Data
angle_exp_deg = convert_to_numpy_array(col1_data_str) # Y-axis
time_exp = convert_to_numpy_array(col2_data_str)      # X-axis

# Theoretical Data
angle_th_deg = convert_to_numpy_array(col3_data_str)               # Y-axis
time_th = convert_to_numpy_array(col4_data_str)       # X-axis (same as time_exp as per table)


# --- Plotting Setup ---
try:
    plt.rcParams['text.usetex'] = True
    plt.rcParams['font.family'] = 'serif'
    plt.rcParams['font.serif'] = ['Computer Modern Roman']
    plt.rcParams['mathtext.fontset'] = 'cm'
    plt.rcParams['text.latex.preamble'] = r"""
        \usepackage[utf8]{inputenc}
        \usepackage[T2A]{fontenc}
        \usepackage[russian]{babel}
        \usepackage{amsmath}
        \usepackage{amsfonts}
        \usepackage{amssymb}
    """
    plt.rcParams['figure.dpi'] = 150
except RuntimeError:
    print("LaTeX не найден, используется стандартный рендеринг Matplotlib.")
    plt.rcParams['text.usetex'] = False
    plt.rcParams['mathtext.fontset'] = 'dejavusans'

# Original colors from your first example, assigned logically
#FDB813
color_experimental = '#FDB813' # Dark blue/grey for experimental
color_theoretical = '#77B5FE'  # Light blue for theoretical
color_difference = '#2E3B4E' # Yellowish, will be used later if we add difference

# --- Create Single Plot ---
fig, ax = plt.subplots(figsize=(7.0, 5.0)) # Adjusted figsize slightly

# Plot Experimental Data (Time vs. Angle)
ax.plot(time_exp, angle_exp_deg, label=r'Экспериментальные данные', color=color_experimental, linewidth=1.5, zorder=2, marker='.', markersize=3, linestyle='-')

# Plot Theoretical Data (Time vs. Angle)
ax.plot(time_th, angle_th_deg, label=r'Теоретические данные', color=color_theoretical, linewidth=1.5, zorder=3, marker='.', markersize=3, linestyle='-')

ax.plot(time_th, angle_th_deg-angle_exp_deg, label=r'Разница', color=color_difference, linewidth=1.5, zorder=4, marker='.', markersize=3, linestyle='-')
# --- Styling the Plot ---
ax.set_xlabel(r'Время $t, \mathrm{s}$', fontsize=11)
ax.set_ylabel(r'Угол $\alpha, \mathrm{deg}$', fontsize=11, rotation=0, ha='right', va='center') # rotation=0 for horizontal y-label
ax.set_title(r'Зависимость угла от времени', fontsize=12, pad=15)

# Positioning axis labels
ax.xaxis.set_label_coords(1.0, -0.085)
ax.yaxis.set_label_coords(-0.04, 1.03) # Adjusted y-label position due to rotation=0

# Ticks
ax.minorticks_on()
ax.tick_params(axis='both', which='major', labelsize=10, direction='in', width=0.75)
ax.tick_params(axis='both', which='minor', direction='in', width=0.5)
ax.tick_params(axis='x', pad=5)
ax.tick_params(axis='y', pad=3)


# Determine overall data range for sensible defaults
all_times = np.concatenate([time_exp, time_th])
all_angles = np.concatenate([angle_exp_deg, angle_th_deg])

time_min_data, time_max_data = np.min(all_times), np.max(all_times)
angle_min_data, angle_max_data = np.min(all_angles), np.max(all_angles)

time_padding = (time_max_data - time_min_data) * 0.05
angle_padding_bottom = (angle_max_data - angle_min_data) * 0.1
angle_padding_top = (angle_max_data - angle_min_data) * 0.15 # Extra for y-label

current_xlim = (time_min_data - time_padding, time_max_data + time_padding)
current_ylim = (angle_min_data - angle_padding_bottom, angle_max_data + angle_padding_top)

ax.set_xlim(current_xlim)
ax.set_ylim(current_ylim)

# Spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.spines['left'].set_linewidth(0.75)
ax.spines['left'].set_position(('data', current_xlim[0]))
ax.spines['bottom'].set_linewidth(0.75)
ax.spines['bottom'].set_position(('data', current_ylim[0]))

# Arrowheads
ax.plot(current_xlim[1], current_ylim[0], ">k", markersize=5, clip_on=False, zorder=5) # X-axis arrow
ax.plot(current_xlim[0], current_ylim[1], "^k", markersize=5, clip_on=False, zorder=5) # Y-axis arrow

# Legend
legend = ax.legend(loc='upper right', frameon=True, fontsize=9.5, borderpad=0.5)
if legend and legend.get_texts():
    legend.get_frame().set_edgecolor('black')
    legend.get_frame().set_linewidth(0.6)
    legend.set_zorder(10)

plt.tight_layout(pad=0.5)
fig.subplots_adjust(left=0.12, bottom=0.15, right=0.95, top=0.90)

plt.show()
